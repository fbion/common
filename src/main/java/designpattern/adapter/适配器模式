定义：适配器模式将某个类的接口转换成客户端期望的另一个接口表示，主的目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。

应用场景：
    1 系统需要使用现有的类，而这些类的接口不符合系统的需要。
    2 想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。
    3 需要一个统一的输出接口，而输入端的类型不可预知。

模式中的角色：
    目标（Target）：定义一个客户端使用的特定接口。
    客户端（Client）：使用目标接口，与和目标接口一致的对象合作。
    被适配者（Adaptee）：一个现存需要适配的接口。
    适配器（Adapter）：负责将Adaptee的接口转换为Target的接口。适配器是一个具体的类，这是该模式的核心。

适配器分为类适配器和对象适配器两种
类适配器
所谓类适配器，指的是适配器Adapter继承我们的被适配者Adaptee，并实现目标接口Target。由于Java中是单继承，所以这个适配器仅仅只能服务于所继承的被适配者Adaptee。
对象适配器
所谓对象适配器，简单的说就是适配器实现我们的目标接口，但是并不继承需要被适配的类。而是通过在适配器的构造函数中将需要被适配的类传递进来从而进行适配。

优点：
    1、可以让任何两个没有关联的类一起运行。
    2、提高了类的复用。
    3、增加了类的透明度。
    4、灵活性和扩展性都非常好，符合开闭原则。

缺点：
    1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，
一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。
    2、由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。