定义：隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。

应用场景：
    1、设计初期阶段，应该有意识的将不同层分离，层与层之间建立外观模式。
    2、开发阶段，子系统越来越复杂，增加外观模式提供一个简单的调用接口。
    3、维护一个大型遗留系统的时候，可能这个系统已经非常难以维护和扩展，但又包含非常重要的功能，为其开发一个外观类，以便新系统与其交互。

模式中的角色：
    门面角色：外观模式的核心。它被客户角色调用，它熟悉子系统的功能。内部根据客户角色的需求预定了几种功能的组合。
    子系统角色:实现了子系统的功能。它对客户角色和Facade时未知的。它内部可以有系统内的相互交互，也可以由供外界调用的接口。
    客户角色:通过调用Facede来完成要实现的功能。

优点：
    1、实现了子系统与客户端之间的松耦合关系。
    2、客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易。
    3、提高了安全性。

缺点：
    1、不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。